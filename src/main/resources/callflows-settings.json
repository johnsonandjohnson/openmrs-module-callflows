{
  "configs": [

  ],
  "renderers": [
    {
      "name": "vxml",
      "mimeType": "application/voicexml+xml",
      "template": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<vxml version=\"2.1\"><%\n\n\tvar sayAsTTS = function(txt, element) {\n\t\tvar out = '',\n\t\t\t\tbargeIn = element.bargeIn ? true : false;\n\n\t\tif (txt.match(/^\\s*$/)) {\n\t\t\treturn out;\n\t\t}\n\t\tout += '\\n<prompt bargein=\"';\n\t\tout += bargeIn;\n\t\tif (element.type === 'field') {\n\t\t  out += '\" timeout=\"';\n      out += '${timeout}';\n      out += 's';\n\t\t}\n\t\tout += '\">';\n\t\tout += txt;\n\t\tout += '\\n</prompt>';\n\t\treturn out;\n\t}\n\n\tvar sayAsAudio = function(txt, mappings, element) {\n\t\tvar out = '',\n\t\t\t\tbargeIn = element.bargeIn ? true : false;\n\t\tif (txt.match(/^\\s*$/)) {\n\t\t\treturn out;\n\t\t}\n\t\tout += '\\n<prompt bargein=\"';\n\t\tout += bargeIn;\n\t\tif (element.type === 'field') {\n\t\t  out += '\" timeout=\"';\n\t\t  out += '${timeout}';\n\t\t  out += 's';\n\t\t}\n\t\tout += '\">';\n\t\tif (txt.indexOf('$') === -1) {\n\t\t\t// Not dynamic\n\t\t\tout += '\\n\\t<audio src=\"${internal.baseURL}/cmsliteapi/stream/$locale/' + mappings[0].mapping + '\" />';\n\t\t} else {\n\t\t\tout += '\\n\\t<audio src=\"${internal.baseURL}/cmsliteapi/stream/$locale/' + txt + '\" />';\n\t\t}\n\t\tout += '\\n</prompt>';\n\t\treturn out;\n\t}\n\n\tvar speak = function(element, txt, audio) {\n\t\tvar out = '',\n\t\t\tbq = \"`\",\n\t\t\t\tphrase = '',\n\t\t\t\taudioStream = false,\n\t\t\t\tnumberText = '<prosody rate=\"-20%\"><say-as interpret-as=\"vxml:digits\">$1</say-as></prosody>',\n\t\t\t\tdtText = '<prosody rate=\"-20%\"><say-as interpret-as=\"vxml:date\">$DateTimeFormat.forPattern(\"yyyyMMdd\").print($1)</say-as></prosody>',\n\t\t\t\tnumberServerText = \"#set($chars = $1.toString().toCharArray())\\n#foreach ($char in $chars)\\n\\t `num_00${char}` \\n#end\",\n\t\t\t\tdtServerText = '',\n\t\t\t\ti, j;\n\t\t\t\t\n\t\tif (! audio) {\n\t\t\taudio = {};\n\t\t}\n\n\t\t// Place custom delimiters here\n\t\ttxt = txt.replace(/__\\s*(.*?)\\s*__/g, numberText);\t\n\t\ttxt = txt.replace(/_\\[\\s*(.*?)\\s*\\]_/g, numberServerText);\t\n\t\ttxt = txt.replace(/%%\\s*(.*?)\\s*%%/g, dtText);\t\n\t\ttxt = txt.replace(/%\\[\\s*(.*?)\\s*\\]%/g, dtServerText);\t\n\t\tconsole.log(txt);\n\t\t\n\n\t\tfor (i = 0; i < txt.length; i+=1) {\n\t\t\tif (txt[i] !== '`') {\n\t\t\t\tphrase += txt[i];\n\t\t\t} else {\n\t\t\t\tif (! audioStream) {\n\t\t\t\t\t// backquote opened, start a audio stream\n\t\t\t\t\taudioStream = true;\n\t\t\t\t\tif (phrase) {\n\t\t\t\t\t\tout += sayAsTTS(phrase, element);\n\t\t\t\t\t}\n\t\t\t\t\t// reset phrase\n\t\t\t\t\tphrase = '';\n\t\t\t\t} else {\n\t\t\t\t\t// closed audio stream\n\t\t\t\t\tconsole.log('phrase = ' + phrase);\n\t\t\t\t\tout += (audio[phrase] || phrase.indexOf('$') > 0) ? sayAsAudio(phrase, audio[phrase], element) : sayAsTTS(phrase, element);\n\t\t\t\t\tphrase = '';\n\t\t\t\t\taudioStream = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tout += sayAsTTS(phrase, element);\n\t\treturn out;\n\t};\n\t// speak({txt: 'hello world'}, {'hello': [{mapping: 'hello_file'}]});\n\n\tvar fields = [];\n\t_.each(node.blocks, function(block) {\n\t\tif (block.type === 'form') {\n\t\t\tprint('<form>');\n\t\t\t_.each(block.elements, function(element) {\n\t\t\t\tif (element.type === 'txt') {\n\t\t\t\t\tprint('<block>');\n\t\t\t\t\tprint(speak(element, element.txt, flow.raw.audio));\n\t\t\t\t\tif (node.continueNode) {\n\t\t\t\t\t\tprint('<goto next=\"${internal.nextURL}\" />');\n\t\t\t\t\t}\n\t\t\t\t\tprint('</block>');\n\t\t\t\t} else if (element.type === 'field') {\n\t\t\t\t\tprint('<field ');\n\t\t\t\t\tif (element.name) {\n\t\t\t\t\t\tfields.push(element.name);\n\t\t\t\t\t\tprint('name=\"' + element.name + '\" ');\n\t\t\t\t\t}\n\t\t\t\t\tif (element.fieldType) {\n\t\t\t\t\t\tprint('type=\"' + element.fieldType);\n\t\t\t\t\t}\n\t\t\t\t\tif (element.fieldMeta) {\n\t\t\t\t\t\tif (element.fieldMeta.indexOf('..') === -1) {\n\t\t\t\t\t\t\tprint('?length=' + element.fieldMeta);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar range = element.fieldMeta.split('..');\n\t\t\t\t\t\t\tif (range.length === 2 && element.fieldMeta.startsWith('..')) {\n\t\t\t\t\t\t\t\tprint('?maxLength=' + range[1]);\n\t\t\t\t\t\t\t} else if (range.length === 2 && element.fieldMeta.endsWith('..')) {\n\t\t\t\t\t\t\t\tprint('?minLength=' + range[0]);\n\t\t\t\t\t\t\t} else if (range.length === 2) {\n\t\t\t\t\t\t\t\tprint('?minLength=' + range[0] + ';maxLength=' + range[1]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (element.fieldType) {\n\t\t\t\t\t\tprint('\"');\n\t\t\t\t\t}\n\t\t\t\t\tprint('>');\n\t\t\t\t\tif (element.dtmf && ! element.voice) {\n\t\t\t\t\t\tprint('<property name=\"inputmodes\" value=\"dtmf\" />');\n\t\t\t\t\t} else if (! element.dtmf && element.voice) {\n\t\t\t\t\t\tprint('<property name=\"inputmodes\" value=\"voice\" />');\n\t\t\t\t\t}\n\t\t\t\t\tif (element.txt) {\n\t\t\t\t\t\tprint(speak(element, element.txt, flow.raw.audio));\n\t\t\t\t\t}\n\t\t\t\t\tif (element.noInput) {\n\t\t\t\t\t\tprint('<noinput>');\n\t\t\t\t\t\tprint(speak(element, element.noInput, flow.raw.audio));\n\t\t\t\t\t\tprint('</noinput>');\n\t\t\t\t\t}\n\t\t\t\t\tif (element.noMatch) {\n\t\t\t\t\t\tprint('<nomatch>');\n\t\t\t\t\t\tprint(speak(element, element.noMatch, flow.raw.audio));\n\t\t\t\t\t\tprint('</nomatch>');\n\t\t\t\t\t}\n\t\t\t\t\tprint('</field>');\n\t\t\t\t}\n\t\t\t})\n\t\t\tif (fields.length) {\n\t\t\t\tprint('\\n<filled mode=\"all\" namelist=\"' + fields.join(' ') + '\">');\n\t\t\t\tprint('<submit next=\"${internal.nextURL}\" />');\n\t\t\t\tprint('</filled>');\n\t\t\t}\n\t\t\tprint('</form>');\n\t\t}\n\t});\n\n%>\n\n</vxml>\n"
    },
    {
      "name": "ccxml",
      "mimeType": "application/ccxml+xml",
      "template": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ccxml version=\"1.0\" xmlns:voxeo=\"http://community.voxeo.com/xmlns/ccxml\">\n\n\t#set($d = \"$\")\n  <var name=\"callTimeout\" expr=\"'60s'\" />\n  <var name=\"state\" expr=\"'init'\"/>\n\n  <!-- OUTGOING, INCOMING -->\n  <var name=\"direction\" expr=\"'${internal.callDirection}'\" />\n  <var name=\"statusURL\" expr=\"'${internal.baseURL}/callflows/status/${internal.callId}'\" />\n  <var name=\"connectionId\" expr=\"'outboundID'\" />\n  <var name=\"callId\" expr=\"'${internal.callId}'\" />\n  <var name=\"jumpTo\" expr=\"'${internal.jumpTo}'\" />\n  <var name=\"direction\" expr=\"'${internal.callDirection}'\" />\n\n  <log expr=\"'startupmode = ' + session.startupmode\"/>\n \n  <eventprocessor statevariable=\"state\">\n\n    <!-- CCXML Loaded -->\n    <transition event=\"ccxml.loaded\">\n      <log expr=\"'ccxml loaded'\" />\n      <if cond=\"session.startupmode === 'external'\">\n        <!-- tel:xxxx, sip:xxx@h:p sip:user@127.0.0.1:5070  -->\n        <createcall dest=\"'tel:+' + '${phone}'\" callerid=\"'${phone}'\" connectionid=\"connectionId\" timeout=\"callTimeout\"/>\n      </if>\n    </transition>\n   \n    <!-- Process the incoming call --> \n    <transition state=\"init\" event=\"connection.alerting\">\n      <accept/>     \n    </transition>\n\n    <!-- Call has been answered.--> \n    <transition state=\"init\" event=\"connection.connected\">\n      <log expr=\"'***** connection.connected ***** ${internal.callId}'\" />\n\t\t\t\t<dialogstart src=\"'${internal.baseURL}/callflows/in/voxeo/flows/MainFlow.vxml'\" namelist=\"session.id application.callerId callId  #if($internal.callDirection == 'OUTGOING') jumpTo #end\" />\n    </transition>\n\n    <!-- Caller hung up.  -->\n    <transition event=\"connection.disconnected\">\n      <log expr=\"'***** connection.disconnected ***** ${internal.callId}'\" />\n      <log expr=\"'***** statusURL = ' + statusURL\" />\n      <var name=\"status\" expr=\"'COMPLETED'\" />\n      <var name=\"reason\" expr=\"'caller hang up'\" />\n\t\t\t<send target=\"statusURL\" targettype=\"'basichttp'\" name=\"'http.get'\" namelist=\"status reason\"/>\n      <exit/>\n    </transition>\n    \n    <!-- Dialog exit -->\n    <transition event=\"dialog.exit\">\n\t\t\t<var name=\"status\" expr=\"'COMPLETED'\" />\n      <var name=\"reason\" expr=\"'normal dialog exit'\" />\n\t\t\t<send target=\"statusURL\" targettype=\"'basichttp'\" name=\"'http.get'\" namelist=\"status reason\"/>\n      <disconnect />      \n    </transition>\n\n    <!-- ERROR!! -->\n    <transition event=\"error.*\" >\n      <log expr=\"'Error: (' + event${d}.reason + ')'\"/>\n      <exit/>\n    </transition>\n\n  </eventprocessor>\n\n</ccxml>\n"
    }
  ]
}

